-- üåü Ïò§ÎäòÏùò ÌïòÎ£® ÏùºÍ∏∞Ïû• - ÏôÑÏ†ÑÌïú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ§Ï†ï

-- STEP 1: profiles ÌÖåÏù¥Î∏î ÏÉùÏÑ± (ÎßåÏïΩ ÏóÜÎã§Î©¥)
CREATE TABLE IF NOT EXISTS public.profiles (
  id UUID REFERENCES auth.users(id) ON DELETE CASCADE PRIMARY KEY,
  email TEXT,
  full_name TEXT,
  avatar_url TEXT,
  bio TEXT,
  phone TEXT,
  website TEXT,
  location TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- profiles ÌÖåÏù¥Î∏î RLS ÏÑ§Ï†ï
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Users can view own profile" ON public.profiles;
CREATE POLICY "Users can view own profile" ON public.profiles
  FOR SELECT USING (auth.uid() = id);

DROP POLICY IF EXISTS "Users can insert own profile" ON public.profiles;
CREATE POLICY "Users can insert own profile" ON public.profiles
  FOR INSERT WITH CHECK (auth.uid() = id);

DROP POLICY IF EXISTS "Users can update own profile" ON public.profiles;
CREATE POLICY "Users can update own profile" ON public.profiles
  FOR UPDATE USING (auth.uid() = id);

-- STEP 2: posts ÌÖåÏù¥Î∏î ÏÉùÏÑ± (ÏùºÍ∏∞Ïû• Í∏∞Îä• Ìè¨Ìï®)
CREATE TABLE IF NOT EXISTS public.posts (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  title TEXT,  -- Ï†úÎ™© (ÏÑ†ÌÉùÏÇ¨Ìï≠)
  content TEXT NOT NULL,  -- ÏùºÍ∏∞ ÎÇ¥Ïö© (ÌïÑÏàò)
  author_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  
  -- ÏùºÍ∏∞Ïû• Ï†ÑÏö© ÌïÑÎìúÎì§
  mood TEXT,  -- Í∏∞Î∂Ñ
  weather TEXT,  -- ÎÇ†Ïî®
  diary_date DATE DEFAULT CURRENT_DATE,  -- ÏùºÍ∏∞ ÏûëÏÑ± ÎÇ†Ïßú
  is_private BOOLEAN DEFAULT false,  -- Í≥µÍ∞ú/ÎπÑÍ≥µÍ∞ú ÏÑ§Ï†ï
  
  -- Í∏∞Î≥∏ ÌïÑÎìúÎì§
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  likes_count INTEGER DEFAULT 0,
  comments_count INTEGER DEFAULT 0
);

-- STEP 3: comments ÌÖåÏù¥Î∏î ÏÉùÏÑ±
CREATE TABLE IF NOT EXISTS public.comments (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  content TEXT NOT NULL,
  post_id UUID REFERENCES public.posts(id) ON DELETE CASCADE NOT NULL,
  author_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- STEP 4: RLS ÌôúÏÑ±Ìôî
ALTER TABLE public.posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.comments ENABLE ROW LEVEL SECURITY;

-- STEP 5: posts Ï†ïÏ±ÖÎì§
DROP POLICY IF EXISTS "Anyone can view public posts" ON public.posts;
CREATE POLICY "Anyone can view public posts" ON public.posts
  FOR SELECT USING (is_private = false OR auth.uid() = author_id);

DROP POLICY IF EXISTS "Users can insert own posts" ON public.posts;
CREATE POLICY "Users can insert own posts" ON public.posts
  FOR INSERT WITH CHECK (auth.uid() = author_id);

DROP POLICY IF EXISTS "Users can update own posts" ON public.posts;
CREATE POLICY "Users can update own posts" ON public.posts
  FOR UPDATE USING (auth.uid() = author_id);

DROP POLICY IF EXISTS "Users can delete own posts" ON public.posts;
CREATE POLICY "Users can delete own posts" ON public.posts
  FOR DELETE USING (auth.uid() = author_id);

-- STEP 6: comments Ï†ïÏ±ÖÎì§
DROP POLICY IF EXISTS "Anyone can view comments" ON public.comments;
CREATE POLICY "Anyone can view comments" ON public.comments
  FOR SELECT USING (true);

DROP POLICY IF EXISTS "Users can insert own comments" ON public.comments;
CREATE POLICY "Users can insert own comments" ON public.comments
  FOR INSERT WITH CHECK (auth.uid() = author_id);

DROP POLICY IF EXISTS "Users can update own comments" ON public.comments;
CREATE POLICY "Users can update own comments" ON public.comments
  FOR UPDATE USING (auth.uid() = author_id);

DROP POLICY IF EXISTS "Users can delete own comments" ON public.comments;
CREATE POLICY "Users can delete own comments" ON public.comments
  FOR DELETE USING (auth.uid() = author_id);

-- STEP 7: Ìï®ÏàòÎì§
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION public.update_comments_count()
RETURNS TRIGGER AS $$
BEGIN
  IF TG_OP = 'INSERT' THEN
    UPDATE public.posts 
    SET comments_count = comments_count + 1 
    WHERE id = NEW.post_id;
    RETURN NEW;
  ELSIF TG_OP = 'DELETE' THEN
    UPDATE public.posts 
    SET comments_count = comments_count - 1 
    WHERE id = OLD.post_id;
    RETURN OLD;
  END IF;
  RETURN NULL;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- STEP 8: Ìä∏Î¶¨Í±∞Îì§
DROP TRIGGER IF EXISTS on_posts_updated ON public.posts;
CREATE TRIGGER on_posts_updated
  BEFORE UPDATE ON public.posts
  FOR EACH ROW EXECUTE FUNCTION public.handle_updated_at();

DROP TRIGGER IF EXISTS on_comments_updated ON public.comments;
CREATE TRIGGER on_comments_updated
  BEFORE UPDATE ON public.comments
  FOR EACH ROW EXECUTE FUNCTION public.handle_updated_at();

DROP TRIGGER IF EXISTS on_comment_change ON public.comments;
CREATE TRIGGER on_comment_change
  AFTER INSERT OR DELETE ON public.comments
  FOR EACH ROW EXECUTE FUNCTION public.update_comments_count();

-- STEP 9: Î∑∞ ÏÉùÏÑ±
DROP VIEW IF EXISTS public.posts_with_author;
CREATE VIEW public.posts_with_author AS
SELECT 
  p.*,
  pr.full_name as author_name,
  pr.email as author_email
FROM public.posts p
LEFT JOIN public.profiles pr ON p.author_id = pr.id
ORDER BY p.diary_date DESC, p.created_at DESC;

DROP VIEW IF EXISTS public.comments_with_author;
CREATE VIEW public.comments_with_author AS
SELECT 
  c.*,
  pr.full_name as author_name,
  pr.email as author_email
FROM public.comments c
LEFT JOIN public.profiles pr ON c.author_id = pr.id
ORDER BY c.created_at ASC;

-- STEP 10: Ïù∏Îç±Ïä§
CREATE INDEX IF NOT EXISTS idx_posts_diary_date ON public.posts(diary_date);
CREATE INDEX IF NOT EXISTS idx_posts_author_date ON public.posts(author_id, diary_date);
CREATE INDEX IF NOT EXISTS idx_posts_created_at ON public.posts(created_at);
CREATE INDEX IF NOT EXISTS idx_comments_post_id ON public.comments(post_id);

-- üéâ ÏôÑÎ£å! Ïù¥Ï†ú ÏùºÍ∏∞Ïû•ÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§! 